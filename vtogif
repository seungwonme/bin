#!/bin/sh

create_gif() {

  input_file=$1
  output_file="${input_file%.*}.gif"
  fps=$2
  width=$3

  # ffmpeg 명령어를 사용하여 입력 파일에서 팔레트를 생성
  # GIF는 색상 수가 제한되어 있기 때문에 최적의 색상 팔레트를 생성하여 GIF의 품질을 높이기 위해 팔레트를 생성
  # -i "$input_file": 입력 파일을 지정
  # -vf "fps=$fps,scale=$width:-1:flags=lanczos,palettegen": 필터를 적용
  #   fps=$fps: 초당 프레임 수를 설정
  #   scale=$width:-1:flags=lanczos: 너비를 설정하고 높이는 비율에 맞춰 자동으로 조정, Lanczos 알고리즘을 사용
  #   palettegen: 팔레트를 생성
  ffmpeg -i "$input_file" -vf "fps=$fps,scale=$width:-1:flags=lanczos,palettegen" palette.png

  # 생성된 팔레트를 사용하여 입력 파일을 GIF로 변환
  # -i "$input_file": 입력 파일을 지정
  # -i palette.png: 생성된 팔레트 파일을 지정
  # -lavfi "fps=$fps,scale=$width:-1:flags=lanczos [x]; [x][1:v] paletteuse": 필터를 적용
  #   fps=$fps: 초당 프레임 수를 설정
  #   scale=$width:-1:flags=lanczos: 너비를 설정하고 높이는 비율에 맞춰 자동으로 조정, Lanczos 알고리즘을 사용
  #   [x]; [x][1:v] paletteuse: 팔레트를 사용하여 GIF를 생성
  ffmpeg -i "$input_file" -i palette.png -lavfi "fps=$fps,scale=$width:-1:flags=lanczos [x]; [x][1:v] paletteuse" "$output_file"

  # 팔레트 파일을 삭제
  rm palette.png

  echo "GIF 생성 완료: $output_file"
}

# 기본값 설정
fps=10
width=320

# 옵션 인자 처리
while [ $# -gt 0 ]; do
  case "$1" in
    -f|--fps)
      fps=$2
      shift 2
      ;;
    -w|--width)
      width=$2
      shift 2
      ;;
    *)
      input_file=$1
      shift
      ;;
  esac
done

# 입력 파일이 없으면 종료
if [ -z "$input_file" ]; then
  echo "사용법: $0 [--fps FPS] [--width WIDTH] input_file"
  exit 1
fi

create_gif "$input_file" "$fps" "$width"
